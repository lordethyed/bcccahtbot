from aiogram.dispatcher import FSMContext
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types.web_app_info import WebAppInfo
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot

from db import db_request
from security import TOKEN
from userutils import choice_language, start_cmd_back, qtm_r1_open, qtm_r_dict, qtm_r1, qtm_r2_open, qtm_r2, \
    qtm_r3_open, qtm_r3, qtm_r4_open, qtm_r4, qtm_r5_open, qtm_r5, qtm_r6, qtm_r6_open, qtm_r7, qtm_r7_open, \
    quick_translate_menu_k_list, qtm_k1, qtm_k2, qtm_k3, qtm_k4, qtm_k5, qtm_k6, qtm_k7, qtm_k7_open, qtm_k6_open, \
    qtm_k5_open, qtm_k4_open, qtm_k3_open, qtm_k2_open, qtm_k1_open
from userutils import quick_translate_menu_k, quick_translate_menu_r
from userutils import quick_translate_menu_r_list, gtm_k_dict

bot = Bot(TOKEN)


class ClientState(StatesGroup):
    language = State()
    help = State()
    connect = State()
    karta = State()
    karta_userid = State()


async def cmd_start(mes: Message, state: FSMContext):  # start
    await state.finish()
    await mes.answer(f'–°–∞–ª–∞–º–∞—Ç—Å—ã–∑–±–∞ @{mes.from_user.username} \n“ö—ã–∑–º–µ—Ç –∫”©—Ä—Å–µ—Ç—É —Ç—ñ–ª—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑',
                     reply_markup=choice_language)
    await ClientState.language.set()
    try:
        conn, res = db_request('''
                    INSERT OR REPLACE INTO users(id, username) VALUES(?,?)
        ''', [mes.from_user.id, mes.chat.full_name])

        conn.commit()
        conn.close()
    except Exception as e:
        print(e)


async def state_choice_language(mes: Message, state: FSMContext):
    if mes.text == 'üá∑üá∫–†—É—Å—Å–∫–∏–π':
        try:
            await mes.answer(f'@{mes.from_user.username}! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –±–∞–Ω–∫–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                             reply_markup=quick_translate_menu_r)
            await state.finish()
        except Exception as e:
            print(e)
    elif mes.text == 'üá∞üáø“ö–∞–∑–∞“õ—à–∞':
        try:
            await mes.answer(f'@{mes.from_user.username}! –°—ñ–∑–≥–µ “õ–∞–Ω–¥–∞–π –±–∞–Ω–∫ ”©–Ω—ñ–º–¥–µ—Ä—ñ “õ—ã–∑—ã“õ—Ç—ã—Ä–∞—Ç—ã–Ω—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑??',
                             reply_markup=quick_translate_menu_k)
            await state.finish()
        except Exception as e:
            print(e)
    else:
        await mes.answer(f'–ú”ô–∑—ñ—Ä–¥–µ–Ω –æ–ø—Ü–∏—è–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑!',
                         reply_markup=start_cmd_back)
        await state.finish()


async def help_answers(mes: Message):
    if mes.text == '–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º' or mes.text == '–û–ø–µ—Ä–∞—Ç–æ—Ä“ì–∞ “õ–æ—Å—ã–ª—É':
        try:
            conn, res = db_request("""
                SELECT id FROM operators WHERE status = 'In Work' ORDER BY ROWID ASC LIMIT 1
            """)
            operator_id = int(str(res.fetchone())[1:-2])
            conn.commit()
            conn.close()
            if operator_id:
                try:
                    conn, res = db_request("""
                                    SELECT id FROM operators WHERE status = 'In Work' ORDER BY ROWID ASC LIMIT 1
                                """)
                    operator_id = int(str(res.fetchone())[1:-2])
                    conn.commit()
                    conn.close()
                    await bot.send_message(chat_id=operator_id,
                                           text=f'We are connecting you with @{mes.from_user.username}')
                except Exception as e:
                    print(e)
            else:
                await mes.answer('–í—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!')
        except Exception as e:
            print(e)
    elif mes.text == '–ë—ñ–∑–¥—ñ“£ –±–∞–Ω–∫—Ç—ñ“£ –∫–∞—Ä—Ç–∞—Å—ã–Ω –∞—à—Éüí≥' or mes.text == '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –Ω–∞—à–µ–≥–æ –±–∞–Ω–∫–∞üí≥':
        karta_keyboard = InlineKeyboardMarkup()
        webapp_karta = InlineKeyboardButton(text='–ö–∞—Ä—Ç–∞–Ω—ã –∞—à—É –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É',
                                            web_app=WebAppInfo(url=('https://www.bcc.kz/kartakarta/')))
        karta_keyboard.add(webapp_karta)

        await mes.answer(
            text='–ö–∞—Ä—Ç–∞–Ω—ã –∞—à—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ —Å—ñ–ª—Ç–µ–º–µ–≥–µ ”©—Ç—ñ“£—ñ–∑\n\n–ß—Ç–æ –±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ',
            reply_markup=karta_keyboard)
    elif mes.text == '–ë–ª–∏–∂–∞–π—à–µ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ –∏ –±–∞–Ω–∫–æ–º–∞—Ç—ãüè¶' or mes.text == '–ï“£ –∂–∞“õ—ã–Ω –±”©–ª—ñ–º—à–µ –∂”ô–Ω–µ –±–∞–Ω–∫–æ–º–∞—Çüè¶':
        raspolozhenie_keyboard = InlineKeyboardMarkup()
        webapp_raspolozhenie = InlineKeyboardButton(text='–ö–∞—Ä—Ç–∞–Ω—ã –∞—à—É –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É',
                                                    web_app=WebAppInfo(url=('https://m.bcc.kz/nearest-bank')))

        raspolozhenie_keyboard.add(webapp_raspolozhenie)

        await mes.answer(
            text='''–ï“£ –∂–∞“õ—ã–Ω —Ñ–∏–ª–∏–∞–ª–¥–∞—Ä –º–µ–Ω –±–∞–Ω–∫–æ–º–∞—Ç—Ç–∞—Ä–¥—ã“£ –∫–∞—Ä—Ç–∞—Å—ã–Ω –∞—à—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ —Å—ñ–ª—Ç–µ–º–µ –±–æ–π—ã–Ω—à–∞ ”©—Ç—ñ“£—ñ–∑\n\n–ß—Ç–æ –±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –±–ª–∏–∂–∞–π—à–∏—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ –∏ –±–∞–Ω–∫–æ–º–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ''',
            reply_markup=raspolozhenie_keyboard)
        raspolozhenie_keyboard.add(webapp_raspolozhenie)
    elif mes.text == '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç –Ω–∞—à–µ–≥–æ –±–∞–Ω–∫–∞üí¥' or mes.text == '–ë—ñ–∑–¥—ñ“£ –±–∞–Ω–∫—Ç—ñ“£ –¥–µ–ø–æ–∑–∏—Ç—ñ–Ω–µ ”©—Ç—ñ–Ω—ñ–º “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑üí¥':
        depozit_keyboard = InlineKeyboardMarkup()
        webapp_depozit = InlineKeyboardButton(text='–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç  –î–µ–ø–æ–∑–∏—Ç—ñ–∫–µ ”©—Ç—ñ–Ω—ñ–º',
                                                    web_app=WebAppInfo(url=('https://www.bcc.kz/product/rakhmet/')))
        depozit_keyboard.add(webapp_depozit)

        await mes.answer(
            text='''–ë—ñ–∑–¥—ñ“£ –±–∞–Ω–∫—Ç—ñ“£ –¥–µ–ø–æ–∑–∏—Ç—ñ–Ω–µ ”©—Ç—ñ–Ω—ñ–º “õ–∞–ª–¥—ã—Ä—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ —Å—ñ–ª—Ç–µ–º–µ –±–æ–π—ã–Ω—à–∞ ”©—Ç—ñ“£—ñ–∑\n\n–ß—Ç–æ –±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç –Ω–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ''',
            reply_markup=depozit_keyboard)
    elif mes.text == '/operator':
        pass
    elif mes.text == '/start':
        await mes.answer(f'–°–∞–ª–∞–º–∞—Ç—Å—ã–∑–±–∞ @{mes.from_user.username} \n“ö—ã–∑–º–µ—Ç –∫”©—Ä—Å–µ—Ç—É —Ç—ñ–ª—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑',
                         reply_markup=choice_language)
        await ClientState.language.set()
    elif mes.text in quick_translate_menu_r_list:
        if mes.text == qtm_r1.text:
            await mes.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=qtm_r1_open)
        elif mes.text == qtm_r2.text:
            await mes.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=qtm_r2_open)
        elif mes.text == qtm_r3.text:
            await mes.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=qtm_r3_open)
        elif mes.text == qtm_r4.text:
            await mes.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=qtm_r4_open)
        elif mes.text == qtm_r5.text:
            await mes.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=qtm_r5_open)
        elif mes.text == qtm_r6.text:
            await mes.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=qtm_r6_open)
        elif mes.text == qtm_r7.text:
            await mes.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=qtm_r7_open)
    elif mes.text in quick_translate_menu_k_list:
        if mes.text == qtm_k1.text:
            await mes.answer('–ë–∞“ì—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑', reply_markup=qtm_k1_open)
        elif mes.text == qtm_k2.text:
            await mes.answer('–ë–∞“ì—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑', reply_markup=qtm_k2_open)
        elif mes.text == qtm_k3.text:
            await mes.answer('–ë–∞“ì—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑', reply_markup=qtm_k3_open)
        elif mes.text == qtm_k4.text:
            await mes.answer('–ë–∞“ì—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑', reply_markup=qtm_k4_open)
        elif mes.text == qtm_k5.text:
            await mes.answer('–ë–∞“ì—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑', reply_markup=qtm_k5_open)
        elif mes.text == qtm_k6.text:
            await mes.answer('–ë–∞“ì—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑', reply_markup=qtm_k6_open)
        elif mes.text == qtm_k7.text:
            await mes.answer('–ë–∞“ì—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑', reply_markup=qtm_k7_open)
    elif mes.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥' or mes.text == '‚¨ÖÔ∏è–ê—Ä—Ç“õ–∞':
        if mes.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥':
            await mes.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=quick_translate_menu_r)
        else:
            await mes.answer('–ë–∞“ì—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑', reply_markup=quick_translate_menu_k)
    else:
        try:
            if mes.text in qtm_r_dict:
                await mes.answer(qtm_r_dict[mes.text])
            else:
                await mes.answer(gtm_k_dict[mes.text])
        except Exception as e:
            await mes.answer('–ú”ô–∑—ñ—Ä–¥–µ–Ω –æ–ø—Ü–∏—è–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Å –º–µ–Ω—é!',
                             reply_markup=start_cmd_back)
            print(e)


def set_handlers_user(dp):
    dp.register_message_handler(cmd_start, commands=['start', 'help'], state=None)
    dp.register_message_handler(state_choice_language, state=ClientState.language)
    dp.register_message_handler(help_answers)
